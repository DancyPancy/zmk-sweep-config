/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
   flavor = "hold-preferred";
   tapping-term-ms = <200>;
};

&lt {
   flavor = "hold-preferred";
   tapping-term-ms = <200>;
};

/ { 
    behaviors {
		ht_tp: hold-tap-tap-preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "HOLD_TAP_TAP_PREFERRED";
			flavor = "tap-preferred";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
		
      	skq: sticky_key_quick_release {
        	compatible = "zmk,behavior-sticky-key";
        	label = "STICKY_KEY_QUICK_RELEASE";
        	#binding-cells = <1>;
        	bindings = <&kp>;
        	release-after-ms = <1000>;
        	quick-release;
      	};

        tsgui: tap_sticky_gui {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_STICKY_GUI";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LGUI>, <&sk LGUI>;
        };

    	cxp: copy_cut_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_CUT_PASTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&ht_tp K_CUT K_COPY>, <&kp K_PASTE>;
        };

	  	eqlbase: equal_base {
            compatible = "zmk,behavior-tap-dance";
            label = "EQUAL_TO_BASE_LAYER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp KP_EQUAL>, <&to 0>;
        };

	  	pnp: play_next_previous {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREVIOUS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };	

		exqu: exclamation_question {
            compatible = "zmk,behavior-tap-dance";
            label = "EXCLAMATION_QUESTION_MARK";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EXCLAMATION>, <&kp QUESTION>;
        };	

		vsfocus: vscode_focus {
            compatible = "zmk,behavior-tap-dance";
            label = "VSCODE_FOCUS_SWAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(GRAVE)>, <&kp LC(N1)>;
        };	

		astperc: asterisk_percent {
            compatible = "zmk,behavior-tap-dance";
            label = "ASTERISK_PERCENT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ASTERISK>, <&kp PERCENT>;
        };	

		spclay: spaco {
            compatible = "zmk,behavior-tap-dance";
            label = "ASTERISK_PERCENT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ASTERISK>, <&kp PERCENT>;
        };	

		dotplus: dot_plus {
			compatible = "zmk,behavior-mod-morph";
            label = "DOT_PLUS";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		commin: comma_minus {
			compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MINUS";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp MINUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
		};
    };

	macros {

        tswap1: tab_swap_1 {
            label = "TAB_SWAP_ONE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_1)>,
				<&macro_tap &tog 1>
                ;
        };

		tswap2: tab_swap_2 {
            label = "TAB_SWAP_TWO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_2)>,
				<&macro_tap &tog 1>;
        };

		tswap3: tab_swap_3 {
            label = "TAB_SWAP_THREE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_3)>,
				<&macro_tap &tog 1>;
        };

		tswap4: tab_swap_4 {
            label = "TAB_SWAP_FOUR";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_4)>,
				<&macro_tap &tog 1>;
        };

		tswap5: tab_swap_5 {
            label = "TAB_SWAP_FIVE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_5)>,
				<&macro_tap &tog 1>;
        };

		tswap6: tab_swap_6 {
            label = "TAB_SWAP_SIX";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_6)>,
				<&macro_tap &tog 1>;
        };

		tswap7: tab_swap_7 {
            label = "TAB_SWAP_SEVEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_7)>,
				<&macro_tap &tog 1>;
        };

		tswap8: tab_swap_8 {
            label = "TAB_SWAP_EIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_8)>,
				<&macro_tap &tog 1>;
        };

		tswap9: tab_swap_9 {
            label = "TAB_SWAP_NINE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp LA(NUMBER_9)>,
				<&macro_tap &tog 1>;
        };

		highline: highlight_line {
            label = "HIGHLIGHT_LINE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
				<&macro_tap &kp END>,
				<&macro_press &kp LSHIFT>,
				<&macro_tap &kp HOME>;
        };
	};

    combos {
        compatible = "zmk,combos";
	

		caps_lock {
			timeout-ms = <75>;
			key-positions = <21 30>;
			layers = <0>;
			bindings = <&kp CAPSLOCK>;
		};

    };

	keymap {
		compatible = "zmk,keymap";
		
		/*0*/
		alpha_layer {
			bindings = <
				&kp Q       &kp W  &kp F  &kp P  &kp B				&kp J &kp L  &kp U    &kp Y     &kp SEMI 
				&kp A       &kp R  &kp S  &kp T  &kp G				&kp M &kp N  &kp E    &kp I     &kp O
				&mt LSFT Z  &kp X  &kp C  &kp D  &kp V				&kp K &kp H  &commin  &dotplus  &mt RSFT APOS
									&lt 3 SPACE  &tog 1				&mo 4 &lt 5 BSPC 
			>;
		};	

		/*1*/
       	num_layer {
			bindings = <
				&kp KP_DIVIDE  &kp N7  &kp N8  &kp N9  &kp KP_ASTERISK				&trans  &trans  &trans  &trans  &trans
				&kp KP_MINUS   &kp N4  &kp N5  &kp N6  &kp KP_PLUS					&trans  &trans  &trans  &trans  &trans 
				&kp PERCENT    &kp N1  &kp N2  &kp N3  &kp DOT					    &trans  &trans  &trans  &trans  &trans 
												&kp N0  &lt 2 SPACE					&trans  &trans 
			>;
		};

		/*2*/
		num_layer2 {
			bindings = <
				&to 0     &tswap7  &tswap8  &tswap9  &ht_tp GT LT					&trans  &trans  &trans  &trans  &trans
				&kp CARET  &tswap4  &tswap5  &tswap6  &kp DOLLAR					&trans  &trans  &trans  &trans  &trans 
				&kp LPAR   &tswap1  &tswap2  &tswap3  &kp RPAR						&trans  &trans  &trans  &trans  &trans 
											&kp KP_EQUAL  &trans					&trans  &trans 
			>;
		};

		/*3*/
		mod_symbol_layer {
			bindings = <
				&kp ESC    &kp LC(LS(Z))  &kp LC(Z)  &pnp     &kp LC(L)				&trans  &trans  &trans  &trans  &trans 
				&highline  &cxp           &kp ENTER  &tsgui   &kp SCLN				&trans  &trans  &trans  &trans  &trans
				&sk LSFT   &sk LCTRL      &skq LALT  &kp TAB  &kp BSLH				&trans  &trans  &trans  &trans  &trans
													&trans  &kp DEL					&trans  &trans 
			>;
		};	

		/*4*/
		rnav_layer {
			bindings = <
				&trans  &trans  &trans  &trans  &trans		&kp LS(LG(PG_UP))  &kp LC(LS(G))  &kp LC(F)  &kp LC(G)   &kp LS(LG(PG_DN))
				&trans  &trans  &trans  &trans  &trans  	&kp RS(RGUI)       &kp LEFT       &kp UP     &kp RIGHT   &kp RCTRL 
				&trans  &trans  &trans  &trans  &trans  	&sk RC(RALT)       &kp HOME       &kp DOWN   &kp END  &kp RSHIFT   
										&trans  &trans 		&trans             &kp LC(BSPC) 
			>;
		};

		/*5*/
		symbol_layer {
			bindings = <
				&trans  &trans  &trans  &trans  &trans				&kp GRAVE   &vsfocus          &kp HASH          &astperc          &kp AT
				&trans  &trans  &trans  &trans  &trans  			&kp TILDE   &ht_tp RPAR LPAR  &ht_tp RBKT LBKT  &ht_tp BSLH FSLH  &kp UNDER
				&trans  &trans  &trans  &trans  &trans   			&kp DOLLAR  &ht_tp RBRC LBRC  &ht_tp GT LT      &exqu             &kp AMPS   
										&trans  &trans 				&kp LC(LS(LA(LGUI)))          &trans 
			>;
		};	
	
	};
};  